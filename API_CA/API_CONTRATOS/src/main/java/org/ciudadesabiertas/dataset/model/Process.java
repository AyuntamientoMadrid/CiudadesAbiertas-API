package org.ciudadesabiertas.dataset.model;
// Generated 2 dic. 2019 12:05:45 by Hibernate Tools 4.3.5.Final

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.ciudadesAbiertas.rdfGeneratorZ.anotations.Context;
import org.ciudadesAbiertas.rdfGeneratorZ.anotations.PathId;
import org.ciudadesAbiertas.rdfGeneratorZ.anotations.Rdf;
import org.ciudadesAbiertas.rdfGeneratorZ.anotations.RdfExternalURI;
import org.ciudadesabiertas.model.RDFModel;
import org.ciudadesabiertas.utils.Constants;
import org.ciudadesabiertas.utils.Util;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import com.opencsv.bean.CsvBindByName;
import com.opencsv.bean.CsvBindByPosition;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * ContratosProcess generated by hbm2java
 */

@Entity
@ApiModel
@Table(name = "contratos_process")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonPropertyOrder(alphabetic = false)
@JsonIgnoreProperties({ Constants.IKEY })
@JacksonXmlRootElement(localName = Constants.RECORD)
@Rdf(contexto = Context.OCDS, propiedad = "ContractingProcess")
@PathId(value = "/contract/process")
public class Process implements java.io.Serializable, RDFModel {

	@JsonIgnore
	private static final long serialVersionUID = -1504640833269124191L;	

	@ApiModelProperty(hidden = true)
	@JsonIgnore	
	private String ikey;

	@ApiModelProperty(value = "Identificador del proceso de contratación (sin caracteres especiales). Ejemplo: 300-2018-00524")
	@CsvBindByPosition(position=1)
	@CsvBindByName(column=Constants.IDENTIFICADOR, format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.DCT, propiedad = Constants.IDENTIFIER)
	private String id;
	
	@ApiModelProperty(value = "Identificador del proceso de contratación (con caracteres especiales). Ejemplo: 300/2018/00524")
	@CsvBindByPosition(position=1)
	@CsvBindByName(column=Constants.IDENTIFICADOR, format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.SCHEMA, propiedad = Constants.IDENTIFIER)
	private String identifier;

	@ApiModelProperty(value = "Nombre del proceso de contratación. Ejemplo: Suministro de diverso material de ferretería para la Jefatura del Cuerpo de Bomberos del Ayuntamiento de Madrid.")
	@CsvBindByPosition(position=2)
	@CsvBindByName(column="title", format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.DCT, propiedad = "title")
	private String title;
	
	@ApiModelProperty(value = "Organización contratante del proceso de contratación. Ejemplo: LA0007386")
	@CsvBindByPosition(position=3)
	@CsvBindByName(column="isBuyerFor", format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.OCDS, propiedad = "isBuyerFor")
	@RdfExternalURI(inicioURI="/contratos/organization/", finURI="isBuyerFor", urifyLevel=2)
	private String isBuyerFor;
	
	@ApiModelProperty(value = "Pliego del proceso de contratación. Ejemplo: TN1")
	@CsvBindByPosition(position=4)
	@CsvBindByName(column="hasTender", format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.DCT, propiedad = "hasTender")
	private String hasTender;
	
	@ApiModelProperty(value = "Web del proceso de contratación. Ejemplo: https://contrataciondelestado.es/wps/poc?uri=deeplink:detalle_licitacion&idEvl=Nc%2F3KT0AQFwBPRBxZ4nJ%2Fg%3D%3D")
	@CsvBindByPosition(position=5)
	@CsvBindByName(column="url", format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.SCHEMA, propiedad = "url")
	private String url;
	
	@ApiModelProperty(value = "Descripción del proceso de contratación. Ejemplo: Id licitación: 300/2018/00524 ; Órgano de Contratación: Área de Gobierno de Salud, Seguridad y Emergencias; Importe: 283162.4 EUR; Estado: ADJ")
	@CsvBindByPosition(position=6)
	@CsvBindByName(column="description", format=Constants.STRING_FORMAT)
	@Rdf(contexto = Context.SCHEMA, propiedad = "description")
	private String description;
	

	public Process() {
		
	}

	public Process(Process copia)
	{		
		this.ikey = copia.ikey;
		this.id = copia.id;
		this.identifier = copia.identifier;
		this.title = copia.title;
		this.isBuyerFor = copia.isBuyerFor;
		this.hasTender = copia.hasTender;
		this.url = copia.url;
		this.description = copia.description;				
	}
	
	

	public Process(Process copia, List<String> attributesToSet)
	{
		if (attributesToSet.contains(Constants.IKEY)) {
			this.ikey = copia.ikey;
		}
		if (attributesToSet.contains(Constants.IDENTIFICADOR)) {
			this.id = copia.id;
		}
		if (attributesToSet.contains(Constants.IDENTIFIER)) {
			this.identifier = copia.identifier;
		}
		if (attributesToSet.contains("title")) {
			this.title = copia.title;		
		}
		if (attributesToSet.contains("isBuyerFor")) {
			this.isBuyerFor = copia.isBuyerFor;		
		}
		if (attributesToSet.contains("hasTender")) {
			this.hasTender = copia.hasTender;		
		}
		if (attributesToSet.contains("url")) {
			this.url = copia.url;		
		}
		if (attributesToSet.contains("description")) {
			this.description = copia.description;		
		}
		
	}

	

	@Id
	@Column(name = "ikey", unique = true, nullable = false, length = 50)
	public String getIkey() {
		return this.ikey;
	}

	public void setIkey(String ikey) {
		this.ikey = ikey;
	}

	

	@Column(name = "id", unique = true, nullable = false, length = 50)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Column(name = "identifier", unique = true, nullable = false, length = 50)
	public String getIdentifier() {
		return this.identifier;
	}

	public void setIdentifier(String identifier) {
		this.identifier = identifier;
	}

	
	@Column(name = "title", nullable = false, length = 400)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "URL", nullable = false, length = 400)
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "description", nullable = false, length = 4000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}



	@Column(name = "is_buyer_for", nullable = true, length = 50)
	public String getIsBuyerFor() {
		return isBuyerFor;
	}




	public void setIsBuyerFor(String isBuyerFor) {
		this.isBuyerFor = isBuyerFor;
	}



	@Column(name = "has_tender", nullable = false, length = 50)
	public String getHasTender() {
		return hasTender;
	}




	public void setHasTender(String hasTender) {
		this.hasTender = hasTender;
	}
	
	
	
	
	@Override
	public String toString() {
		return "Process [ikey=" + ikey + ", id=" + id + ", identifier=" + identifier + ", title=" + title
				+ ", isBuyerFor=" + isBuyerFor + ", hasTender=" + hasTender + ", url=" + url + ", description="
				+ description + "]";
	}

	public Map<String,String> prefixes()
	{
		Map<String,String> prefixes=new HashMap<String,String>();
		prefixes.put(Context.DCT, Context.DCT_URI);	
		prefixes.put(Context.SCHEMA, Context.SCHEMA_URI);
		prefixes.put(Context.DUL, Context.DUL_URI);
		prefixes.put(Context.OCDS, Context.OCDS_URI);
		
		return prefixes;
	}


	@SuppressWarnings("unchecked")
	@Override
	public <T> T cloneModel(T copia, List<String> listado) 
	{
		return (T) cloneClass((Process) copia, listado);
	}
	
	public Process cloneClass(Process copia, List<String> attributesToSet) {

		Process obj = new Process(copia,attributesToSet);		

		return obj;

	}

	@Override
	public List<String> validate()
	{
		List<String> result= new ArrayList<String>();
		
		//Validamos campos Obligatorios ver si es posible obtener esta información mediante anotaciones del modelo
		if (!Util.validValue(this.getId())) {
			result.add("Id is not valid [Id:"+this.getId()+"]");
		}
				
								
		if (!Util.validValue(this.getTitle())) {
			result.add("Title is not valid [Title:"+this.getTitle()+"]");
		}
		
		if (!Util.validValue(this.getIsBuyerFor())) {
			result.add("IsBuyerFor is not valid [IsBuyerFor:"+this.getIsBuyerFor()+"]");
		}
		
		
		return result;
	}
	

}
